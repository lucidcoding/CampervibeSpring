package uk.co.luciditysoftware.campervibe.site.controllers;

import java.io.IOException;
import java.util.Collection;
import java.util.List;
import java.util.UUID;
import java.util.stream.Collectors;

import javax.inject.Inject;
import javax.validation.Valid;

import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Controller;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.view.RedirectView;
import org.springframework.validation.BindingResult;

import uk.co.luciditysoftware.campervibe.domain.common.ValidationMessage;
import uk.co.luciditysoftware.campervibe.domain.entities.Booking;
import uk.co.luciditysoftware.campervibe.domain.entities.Vehicle;
import uk.co.luciditysoftware.campervibe.domain.repositorycontracts.BookingRepository;
import uk.co.luciditysoftware.campervibe.domain.repositorycontracts.VehicleRepository;
import uk.co.luciditysoftware.campervibe.domain.requests.booking.MakeRequest;
import uk.co.luciditysoftware.campervibe.site.security.UserPrincipal;
import uk.co.luciditysoftware.campervibe.site.viewmodels.booking.IndexViewModel;
import uk.co.luciditysoftware.campervibe.site.viewmodels.booking.IndexViewModelRow;
import uk.co.luciditysoftware.campervibe.site.viewmodels.booking.MakeViewModel;
import uk.co.luciditysoftware.campervibe.site.viewmodels.booking.PendingForVehicleViewModel;
import uk.co.luciditysoftware.campervibe.site.viewmodels.booking.PendingForVehicleViewModelRow;
import uk.co.luciditysoftware.campervibe.site.viewmodels.common.SelectListOption;

import org.springframework.web.bind.annotation.RequestMethod;

@Controller
public class BookingController {

	//Trying to push
	//http://forum.spring.io/forum/spring-projects/data/130853-injecting-hibernate-sessionfactory-when-using-localcontainerentitymanagerfactorybean
	//http://patrickgrimard.com/2009/12/08/spring-mvc-and-hibernate-made-simple-with-annotations/
	//http://stackoverflow.com/questions/6446857/spring-using-factory-beans-in-configuration
	//https://github.com/pgrimard/hibernate1/blob/master/src/main/webapp/WEB-INF/test-servlet.xml
	private BookingRepository bookingRepository; 
	private VehicleRepository vehicleRepository;
	
	@Inject
	public void setBookingRepository(BookingRepository bookingRepository) {
		this.bookingRepository = bookingRepository;
	}

	@Inject
	public void setVehicleRepository(VehicleRepository vehicleRepository) {
		this.vehicleRepository = vehicleRepository;
	}

	@ResponseBody
	@RequestMapping(value = "/booking/index", method = RequestMethod.GET)
	@Transactional
	public ModelAndView index() {

	    @SuppressWarnings("unused")
		UserPrincipal user = (UserPrincipal)SecurityContextHolder.getContext().getAuthentication().getPrincipal();
		Collection<Booking> bookings = bookingRepository.getAll();
		
		/*java.util.ArrayList<Booking> bookingArrayList1 = (ArrayList<Booking>)bookings;
		Vehicle vehicle1 = bookingArrayList1.get(0).getVehicle();
		java.util.Iterator<Booking> bookingIterator = vehicle1.getBookings().iterator();
		
		while(bookingIterator.hasNext()) {
			Booking booking = bookingIterator.next();
			System.out.print("test");
		}*/
		
		IndexViewModel viewModel = new IndexViewModel();

		viewModel.setBookings(
				bookings.stream().map(booking -> new IndexViewModelRow(booking)).collect(Collectors.toList()));

		return new ModelAndView("booking/index", "viewModel", viewModel);
	}

	@RequestMapping(value = "/booking/make", method = RequestMethod.GET)
	@Transactional
	public ModelAndView make() {
		MakeViewModel viewModel = new MakeViewModel();
		hydrateMakeViewModel(viewModel);
		return new ModelAndView("booking/make", "viewModel", viewModel);
	}

	private void hydrateMakeViewModel(MakeViewModel viewModel) {
		List<Vehicle> vehicles = vehicleRepository.getAll();
		
		List<SelectListOption> vehicleOptions = vehicles.stream().map(vehicle -> new SelectListOption() {
			{
				setText(vehicle.getName());
				setValue(vehicle.getId());
			}
		}).collect(Collectors.toList());
		
		vehicleOptions.add(0, new SelectListOption() {
			{
				setText("Please Select...");
				setValue(null);
			}
		});
		
		viewModel.setVehicleOptions(vehicleOptions);
	}
	
	@RequestMapping(value = "/booking/pendingforvehicle/{vehicleId}", method = RequestMethod.GET)
	@Transactional
	public ModelAndView pendingForVehicle(@PathVariable("vehicleId") UUID vehicleId) {
		List<Booking> bookings = bookingRepository.getAll();
		PendingForVehicleViewModel viewModel = new PendingForVehicleViewModel();

		viewModel.setBookings(
				bookings.stream().map(booking -> new PendingForVehicleViewModelRow(){
					{
						setBookingNumber(booking.getBookingNumber());
						setStartDate(booking.getStartDate());
						setEndDate(booking.getEndDate());
					}
				}).collect(Collectors.toList()));

		return new ModelAndView("booking/pendingForVehicle", "viewModel", viewModel);
	}

	@RequestMapping(value = "/booking/make", method = RequestMethod.POST)
	@Transactional
	public ModelAndView make(@Valid @ModelAttribute("viewModel") MakeViewModel viewModel, BindingResult bindingResult) throws IOException {
		if(bindingResult.hasErrors()) {
			hydrateMakeViewModel(viewModel);
			ModelAndView modelAndView = new ModelAndView("booking/make", "viewModel", viewModel);
			modelAndView.addObject("errors", bindingResult);
			return modelAndView;
		}
		
		MakeRequest makeRequest = new MakeRequest();
		makeRequest.setVehicle(vehicleRepository.getById(viewModel.getVehicleId()));
		makeRequest.setStartDate(viewModel.getStartDate());
		makeRequest.setEndDate(viewModel.getEndDate());
		//List<ValidationMessage> validationMessages = Booking.validateMake(makeRequest);
		Booking booking = Booking.make(makeRequest);
		bookingRepository.save(booking);
		return new ModelAndView(new RedirectView("index"));
	}
}
