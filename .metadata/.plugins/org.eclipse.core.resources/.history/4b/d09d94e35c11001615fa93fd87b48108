package uk.co.luciditysoftware.campervibe.site.controllers;

import java.io.IOException;
import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;
import java.util.UUID;

import javax.inject.Inject;
import javax.validation.Valid;

import org.apache.commons.codec.binary.Base64;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;
import org.springframework.security.crypto.bcrypt.BCrypt;
import org.springframework.stereotype.Controller;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.view.RedirectView;

import uk.co.luciditysoftware.campervibe.domain.entities.User;
import uk.co.luciditysoftware.campervibe.domain.repositorycontracts.RoleRepository;
import uk.co.luciditysoftware.campervibe.domain.repositorycontracts.UserRepository;
import uk.co.luciditysoftware.campervibe.domain.requests.user.RegisterRequest;
import uk.co.luciditysoftware.campervibe.site.viewmodels.account.RegisterViewModel;

@Controller
public class AccountController {
	private SessionFactory sessionFactory;
	private UserRepository userRepository;
	private RoleRepository roleRepository;
	private static final int HASHING_ROUNDS = 10;
	
	@Inject 
	public void setSessionFactory(SessionFactory sessionFactory) {
		this.sessionFactory = sessionFactory;
	}
	
	@Inject 
	public void setUserRepository(UserRepository userRepository) {
		this.userRepository = userRepository;
	}

	@Inject 
	public void setRoleRepository(RoleRepository roleRepository) {
		this.roleRepository = roleRepository;
	}
	
	@RequestMapping(value = { "/account/login" }, method = RequestMethod.GET)
    public String login()
    {
        return "accountlogin";
    }
	
	@RequestMapping(value = "/account/register", method = RequestMethod.GET)
	public ModelAndView make() {
		//Session session = sessionFactory.getCurrentSession();
		//Transaction transaction = session.beginTransaction();
		RegisterViewModel viewModel = new RegisterViewModel();
		//transaction.commit();
		return new ModelAndView("account/register", "viewModel", viewModel);
	}
	
	@RequestMapping(value = "/account/register", method = RequestMethod.POST)
	public ModelAndView make(@Valid @ModelAttribute("viewModel") RegisterViewModel viewModel, BindingResult bindingResult) throws IOException, NoSuchAlgorithmException {
		Session session = sessionFactory.getCurrentSession();
		Transaction transaction = session.beginTransaction();
		
		if(bindingResult.hasErrors()) {
			ModelAndView modelAndView = new ModelAndView("account/register", "viewModel", viewModel);
			modelAndView.addObject("errors", bindingResult);
			transaction.commit();
			return modelAndView;
		}
		
		RegisterRequest registerRequest = new RegisterRequest();
		String salt = BCrypt.gensalt(HASHING_ROUNDS, SecureRandom.getInstanceStrong());
		byte[] encryptedPasswordBytes = BCrypt.hashpw(viewModel.getPassword(), salt).getBytes();
		String encryptedPassword = Base64.encodeBase64String(encryptedPasswordBytes); 
		registerRequest.setUsername(viewModel.getUsername());
		registerRequest.setPassword(encryptedPassword);
		registerRequest.setPasswordSalt(salt);
		registerRequest.setFirstName(viewModel.getFirstName());
		registerRequest.setLastName(viewModel.getLastName());
		registerRequest.setRole(roleRepository.getById(UUID.fromString("2C6E33B8-BD7C-492C-807D-B4B1BCAE5F4F")));
		User user = User.register(registerRequest);
		userRepository.save(user);
		transaction.commit();
		return new ModelAndView(new RedirectView("index"));
	}
}
