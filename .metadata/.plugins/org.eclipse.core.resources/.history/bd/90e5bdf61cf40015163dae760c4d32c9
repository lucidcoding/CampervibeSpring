package uk.co.luciditysoftware.campervibe.config;

import javax.inject.Inject;
import javax.sql.DataSource;

import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.builders.WebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.config.annotation.web.servlet.configuration.EnableWebMvcSecurity;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;

import uk.co.luciditysoftware.campervibe.site.security.AuthenticationService;

@Configuration
@EnableWebMvcSecurity
public class SecurityConfiguration extends WebSecurityConfigurerAdapter
{
	private AuthenticationService authenticationService;
	
	@Inject
	public void setAuthenticationService(AuthenticationService authenticationService) {
		this.authenticationService = authenticationService;
	}
	
    @Override
    protected void configure(AuthenticationManagerBuilder builder)
            throws Exception
    {
        builder
            //.authenticationProvider(this.authenticationService);
        	/*.jdbcAuthentication()
        		.dataSource(dataSource)
        		.usersByUsernameQuery("SELECT Username, Password, Enabled " +
        					"FROM User WHERE Usename = ?")
        		.authoritiesByUsernameQuery("SELECT Username, Permission " +
        					"FROM UserPermission WHERE Username = ?")
        		.passwordEncoder(new BCryptPasswordEncoder());*/
                .inMemoryAuthentication()
                        .withUser("John")
                        .password("password")
                        .authorities("USER")
                    .and()
                        .withUser("Margaret")
                        .password("green")
                        .authorities("USER", "ADMIN");
    }

    @Override
    public void configure(WebSecurity security)
    {
        security.ignoring().antMatchers("/resource/**");
    }

    @Override
    protected void configure(HttpSecurity security) throws Exception
    {
        security
                .authorizeRequests()
                    .antMatchers("/signup", "/about", "/policies").permitAll()
                    .antMatchers("/secure/**").hasAuthority("USER")
                    .antMatchers("/admin/**").hasAuthority("ADMIN")
                    .anyRequest().authenticated()
                .and().formLogin()
                    .loginPage("/account/login").failureUrl("/account/login?error")
                    .defaultSuccessUrl("/secure/")
                    .usernameParameter("username")
                    .passwordParameter("password")
                    .permitAll()
                .and().logout()
                    .logoutUrl("/account/logout").logoutSuccessUrl("/account/login?loggedOut")
                    .invalidateHttpSession(true).deleteCookies("JSESSIONID")
                    .permitAll()
                .and().sessionManagement()
                    .sessionFixation().changeSessionId()
                    .maximumSessions(1).maxSessionsPreventsLogin(true)
                .and().and().csrf().disable();
    }
}
